# -*- coding: utf-8 -*-
"""Sentiment_Analysis_USElection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/109in7tHRiiffj5HkjWBCOrpgdmZH_P-9
"""

from google.colab import drive
drive.mount('/content/drive')



''' This is the code for Sentiment analysis of the opinions of people on 2020 presidential candidates Biden and Trump.
    By Soma Arun and Swaraj Chirumamila'''


!pip install vaderSentiment
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer


trump=pd.read_csv("/content/hashtag_donaldtrump.csv")
biden=pd.read_csv("/content/hashtag_joebiden.csv")




# Create a VADER sentiment analyzer
analyzer = SentimentIntensityAnalyzer()

# Function to apply VADER sentiment analysis to each tweet
def vader_pol(tweet):
    try:
        # Check if the tweet is not NaN or float
        if not pd.isna(tweet) and not isinstance(tweet, float):
            return analyzer.polarity_scores(tweet)['compound']
        else:
            return 0.0  # or any default value you prefer for NaN or non-string values
    except Exception as e:
        print(f"Error processing tweet: {tweet}. Error: {e}")
        return 0.0

# Apply VADER sentiment analysis to the 'tweet' column
trump["Vader_Polarity"] = trump["tweet"].apply(vader_pol)
biden["Vader_Polarity"] = biden["tweet"].apply(vader_pol)

# Categorize sentiments
trump["sentiment"] = pd.cut(trump["Vader_Polarity"], bins=[-1, -0.05, 0.05, 1], labels=["Negative", "Neutral", "Positive"])
biden["sentiment"] = pd.cut(biden["Vader_Polarity"], bins=[-1, -0.05, 0.05, 1], labels=["Negative", "Neutral", "Positive"])

# Display the dataframe with Vader sentiment scores and sentiments
print(trump[["tweet", "Vader_Polarity", "sentiment"]].head(7))
print(biden[["tweet", "Vader_Polarity", "sentiment"]].head(7))

print("\n")

#store  the count  Positive negative and neutral statements by users
count_trump=trump.groupby('sentiment').count()
count_biden=biden.groupby('sentiment').count()

#show  the count  Positive negative and neutral statements by users for trump
print("stats for Trump:\n","Positive: ",count_trump['Vader_Polarity'][2],"\t","Neutral: ",count_trump['Vader_Polarity'][1],"\t","Negative: ",count_trump['Vader_Polarity'][0])
print("\n")

#show  the count  Positive negative and neutral statements by users for joe biden
print("stats for Biden\n","Positive: ",count_biden['Vader_Polarity'][2],"\t","Neutral: ",count_biden['Vader_Polarity'][1],"\t","Negative: ",count_biden['Vader_Polarity'][0])
print("\n")

# Candidate names
name = ["Trump", "Biden"]

# Number of positive sentiments for each candidate
list_pos = [count_trump['Vader_Polarity'][2], count_biden['Vader_Polarity'][2]]

# Number of negative sentiments for each candidate
list_neg = [count_trump['Vader_Polarity'][0], count_biden['Vader_Polarity'][0]]

# Number of neutral sentiments for each candidate
list_neut = [count_trump['Vader_Polarity'][1], count_biden['Vader_Polarity'][1]]

# Importing the necessary Plotly library
import plotly.graph_objects as go

# Creating a figure with grouped bar chart data
fig = go.Figure(data=[
    go.Bar(name='+ve', x=name, y=list_pos),  # Positive sentiments bar
    go.Bar(name='-ve', x=name, y=list_neg),  # Negative sentiments bar
    go.Bar(name='Neut', x=name, y=list_neut)  # Neutral sentiments bar
])

# Setting the layout to display bars in a grouped manner
fig.update_layout(barmode='group')

# Displaying the figure
fig.show()